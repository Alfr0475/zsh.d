# カレントディレクトのファイルをlessで見る
function __look {
    less $(find . -type f -maxdepth 1 | peco)
}

# iTerm2のタブ名を変更する
function __title {
    echo -ne "\033]0;"$* "\007"
}

function __profile {
    echo -ne "\033]50;SetProfile="$*"\007"
}

# tmuxのテーマを選択する
function __tmux_powerline_theme {
    if ! [ -n "$TMUX" ]; then
        echo "not run tmux."
        return
    fi

    case "$1" in
        "-l" | "--list" )
            for theme in `ls -1 $HOME/.tmux.d/tmux-powerline/themes`
            do
                if [ "`basename $theme .sh`" = "`tmux show-environment -g TMUX_POWERLINE_THEME | sed -e 's/TMUX_POWERLINE_THEME=//'`" ]; then
                    echo "*`basename $theme .sh`"
                else
                    echo " `basename $theme .sh`"
                fi
            done
            ;;
        *)
            if [ -e "$HOME/.tmux.d/tmux-powerline/themes/$1.sh" -o -L "$HOME/.tmux.d/tmux-powerline/themes/$1.sh" ]; then
                tmux set-environment -g TMUX_POWERLINE_THEME $1
            fi
            ;;
    esac
}

# pathを整形して出力
function __printpath {
    for path_string in $path
    do
        echo $path_string
    done
}

# 引数のコマンドを数秒間隔で実行
function __loopwatch {
    local usage="Usage: $0 [-s 5] COMMAND"
    local enable_s=""
    local s_looptime=5

    while getopts :s: opt; do
        case ${opt} in
            s)
                # 数値チェック
                if [[ -z `echo ${OPTARG} | egrep "[0-9]+$"` ]]; then
                    echo $usage
                    return
                fi
                # 有効数値チェック
                if [ ${OPTARG} -le 0 ]; then
                    echo $usage
                    return
                fi
                s_looptime=${OPTARG}
                ;;
            *)
                echo $usage
                return
                ;;
        esac
    done

    shift $((OPTIND-1))

    # 無限ループして処理
    while true
    do
        clear
        date
        echo
        $*
        `sleep ${s_looptime}`;
    done
}

function __is-git-repository {
    if git rev-parse 2> /dev/null; then
        return 0
    else
        return 1
    fi
}

function __is-git-remote {
    if git remote show $1 2> /dev/null; then
        return 0
    else
        return 1
    fi
}

function __update-fork-repository-git {
    if __is-git-repository; then
        if __is-git-remote upstream; then
            git checkout develop
            git pull upstream develop
            git push origin develop
        fi
    fi
}

# git 差分ファイル取得
# http://qiita.com/kaminaly/items/28f9cb4e680deb700833
function __git-diff-archive() {
    local diff=""
    local h="HEAD"
    if [ $# -eq 1 ]; then
        if expr "$1" : '[0-9]*$' > /dev/null; then
            diff="HEAD~${1} HEAD"
        else
            diff="${1} HEAD"
        fi
    elif [ $# -eq 2 ]; then
        diff="${1} ${2}"
        h=$1
    fi
    if [ "$diff" != "" ]; then
        diff="git diff --diff-filter=MACR --name-only ${diff}"
    fi
    git archive --format=zip --prefix=root/ $h `eval $diff` -o archive.zip
}

# ビタコレ専用処理
function __git-diff-archive-assetbundle() {
    local diff=""
    local h="HEAD"
    if [ $# -eq 1 ]; then
        if expr "$1" : '[0-9]*$' > /dev/null; then
            diff="HEAD~${1} HEAD"
        else
            diff="${1} HEAD"
        fi
    elif [ $# -eq 2 ]; then
        diff="${1} ${2}"
        h=$1
    fi
    if [ "$diff" != "" ]; then
        diff="git diff --diff-filter=MACR --name-only ${diff} AssetBundles/"
    fi
    git archive --format=zip --prefix=root/ $h `eval $diff` -o archive.zip
}

function __tmux-pbcopy {
    if ! type pbcopy >/dev/null 2>&1 || ! type reattach-to-user-namespace >/dev/null 2>&1; then
        tmux display-message "Error: cannot copy to clipboard."
        exit 0
    fi

    COPY=`tmux save-buffer -`
    echo "$COPY" | reattach-to-user-namespace pbcopy

    # メッセージ表示
    LINES=`echo "$COPY" | wc -l | tr -d ' '`
    tmux display-message "Copy: $LINES lines"
}

function __showzshoptions {
    set -o | sed -e 's/^no\(.*\)on$/\1  off/' -e 's/^no\(.*\)off$/\1  on/'
}

function __color256 {
    for code in {000..255};
    do
        print -nP -- "%F{$code}$code %f"; [ $((${code} % 16)) -eq 15 ] && echo;
    done
}

function __color16 {
    echo " On White(47)     On Black(40)     On Default     Color Code"

    echo -e "\
\033[47m\033[1;37m  White        \033[0m  \
\033[40m\033[1;37m  White        \033[0m  \
\033[1;37m  White        \033[0m\
  1;37\
"

    echo -e "\
\033[47m\033[37m  Light Gray   \033[0m  \
\033[40m\033[37m  Light Gray   \033[0m  \
\033[37m  Light Gray   \033[0m  \
37\
"

    echo -e "\
\033[47m\033[1;30m  Gray         \033[0m  \
\033[40m\033[1;30m  Gray         \033[0m  \
\033[1;30m  Gray         \033[0m  \
1;30\
"

    echo -e "\
\033[47m\033[30m  Black        \033[0m  \
\033[40m\033[30m  Black        \033[0m  \
\033[30m  Black        \033[0m  \
30\
"

    echo -e "\
\033[47m\033[31m  Red          \033[0m  \
\033[40m\033[31m  Red          \033[0m  \
\033[31m  Red          \033[0m  \
31\
"

    echo -e "\
\033[47m\033[1;31m  Light Red    \033[0m  \
\033[40m\033[1;31m  Light Red    \033[0m  \
\033[1;31m  Light Red    \033[0m  \
1;31\
"

    echo -e "\
\033[47m\033[32m  Green        \033[0m  \
\033[40m\033[32m  Green        \033[0m  \
\033[32m  Green        \033[0m  \
32\
"

    echo -e "\
\033[47m\033[1;32m  Light Green  \033[0m  \
\033[40m\033[1;32m  Light Green  \033[0m  \
\033[1;32m  Light Green  \033[0m  \
1;32\
"

    echo -e "\
\033[47m\033[33m  Brown        \033[0m  \
\033[40m\033[33m  Brown        \033[0m  \
\033[33m  Brown        \033[0m  \
33\
"

    echo -e "\
\033[47m\033[1;33m  Yellow       \033[0m  \
\033[40m\033[1;33m  Yellow       \033[0m  \
\033[1;33m  Yellow       \033[0m  \
1;33\
"

    echo -e "\
\033[47m\033[34m  Blue         \033[0m  \
\033[40m\033[34m  Blue         \033[0m  \
\033[34m  Blue         \033[0m  \
34\
"

    echo -e "\
\033[47m\033[1;34m  Light Blue   \033[0m  \
\033[40m\033[1;34m  Light Blue   \033[0m  \
\033[1;34m  Light Blue   \033[0m  \
1;34\
"

    echo -e "\
\033[47m\033[35m  Purple       \033[0m  \
\033[40m\033[35m  Purple       \033[0m  \
\033[35m  Purple       \033[0m  \
35\
"

    echo -e "\
\033[47m\033[1;35m  Pink         \033[0m  \
\033[40m\033[1;35m  Pink         \033[0m  \
\033[1;35m  Pink         \033[0m  \
1;35\
"

    echo -e "\
\033[47m\033[36m  Cyan         \033[0m  \
\033[40m\033[36m  Cyan         \033[0m  \
\033[36m  Cyan         \033[0m  \
36\
"

    echo -e "\
\033[47m\033[1;36m  Light Cyan   \033[0m  \
\033[40m\033[1;36m  Light Cyan   \033[0m  \
\033[1;36m  Light Cyan   \033[0m  \
1;36\
"
}

#------------------------------------------------------------------------------
# ネタ
#------------------------------------------------------------------------------
# 雪を降らせる
# http://orebibou.com/2014/08/%E5%BD%B9%E3%81%AB%E3%81%AF%E7%AB%8B%E3%81%9F%E3%81%AA%E3%81%84%E3%81%91%E3%81%A9%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%A0%E3%81%91%E9%9D%A2%E7%99%BD%E3%81%84linux%E3%81%AE%E3%82%BF%E3%83%BC/
function __snowfall {
    clear;
    while :;
    do
        echo $LINES $COLUMNS $(($RANDOM%$COLUMNS));
        sleep 0.1;
    done|gawk '{a[$3]=0;for(x in a) {o=a[x];a[x]=a[x]+1;printf "\033[%s;%sH ",o,x;printf "\033[%s;%sH*\033[0;0H",a[x],x;}}'
}

# Matrixっぽい演出
# http://orebibou.com/2014/08/%E5%BD%B9%E3%81%AB%E3%81%AF%E7%AB%8B%E3%81%9F%E3%81%AA%E3%81%84%E3%81%91%E3%81%A9%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E3%81%A0%E3%81%91%E9%9D%A2%E7%99%BD%E3%81%84linux%E3%81%AE%E3%82%BF%E3%83%BC/
function __matrix {
    echo -e "\e[1;40m" ;
    clear ;
    while :;
    do
        echo $LINES $COLUMNS $(( $RANDOM % $COLUMNS)) $(( $RANDOM % 72 )) ;
        sleep 0.05;
    done|gawk '{ letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"; c=$4; letter=substr(letters,c,1);a[$3]=0;for (x in a) {o=a[x];a[x]=a[x]+1; printf "\033[%s;%sH\033[2;32m%s",o,x,letter; printf "\033[%s;%sH\033[1;37m%s\033[0;0H",a[x],x,letter;if (a[x] >= $1) { a[x]=0; } }}'
}
