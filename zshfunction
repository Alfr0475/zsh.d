# tmuxのテーマを選択する
function __tmux_powerline_theme {
    if ! [ -n "$TMUX" ]; then
        echo "not run tmux."
        return
    fi

    case "$1" in
        "-l" | "--list" )
            for theme in `ls -1 $HOME/.tmux.d/tmux-powerline/themes`
            do
                if [ "`basename $theme .sh`" = "`tmux show-environment -g TMUX_POWERLINE_THEME | sed -e 's/TMUX_POWERLINE_THEME=//'`" ]; then
                    echo "*`basename $theme .sh`"
                else
                    echo " `basename $theme .sh`"
                fi
            done
            ;;
        *)
            if [ -e "$HOME/.tmux.d/tmux-powerline/themes/$1.sh" -o -L "$HOME/.tmux.d/tmux-powerline/themes/$1.sh" ]; then
                tmux set-environment -g TMUX_POWERLINE_THEME $1
            fi
            ;;
    esac
}

# pathを整形して出力
function __printpath {
    for path_string in $path
    do
        echo $path_string
    done
}

# 引数のコマンドを数秒間隔で実行
function __loopwatch {
    local usage="Usage: $0 [-s 5] COMMAND"
    local enable_s=""
    local s_looptime=5

    while getopts :s: opt; do
        case ${opt} in
            s)
                # 数値チェック
                if [[ -z `echo ${OPTARG} | egrep "[0-9]+$"` ]]; then
                    echo $usage
                    return
                fi
                # 有効数値チェック
                if [ ${OPTARG} -le 0 ]; then
                    echo $usage
                    return
                fi
                s_looptime=${OPTARG}
                ;;
            *)
                echo $usage
                return
                ;;
        esac
    done

    shift $((OPTIND-1))

    # 無限ループして処理
    while true
    do
        clear
        date
        echo
        $*
        `sleep ${s_looptime}`;
    done
}

function __is-git-repository {
    if git rev-parse 2> /dev/null; then
        return 0
    else
        return 1
    fi
}

function __is-git-remote {
    if git remote show $1 2> /dev/null; then
        return 0
    else
        return 1
    fi
}

function __update-fork-repository-git {
    if __is-git-repository; then
        if __is-git-remote upstream; then
            git checkout develop
            git pull upstream develop
            git push origin develop
        fi
    fi
}

# git 差分ファイル取得
# http://qiita.com/kaminaly/items/28f9cb4e680deb700833
function __git-diff-archive() {
    local diff=""
    local h="HEAD"
    if [ $# -eq 1 ]; then
        if expr "$1" : '[0-9]*$' > /dev/null; then
            diff="HEAD~${1} HEAD"
        else
            diff="${1} HEAD"
        fi
    elif [ $# -eq 2 ]; then
        diff="${1} ${2}"
        h=$1
    fi
    if [ "$diff" != "" ]; then
        diff="git diff --diff-filter=MACR --name-only ${diff}"
    fi
    git archive --format=zip --prefix=root/ $h `eval $diff` -o archive.zip
}

# ビタコレ専用処理
function __git-diff-archive-assetbundle() {
    local diff=""
    local h="HEAD"
    if [ $# -eq 1 ]; then
        if expr "$1" : '[0-9]*$' > /dev/null; then
            diff="HEAD~${1} HEAD"
        else
            diff="${1} HEAD"
        fi
    elif [ $# -eq 2 ]; then
        diff="${1} ${2}"
        h=$1
    fi
    if [ "$diff" != "" ]; then
        diff="git diff --diff-filter=MACR --name-only ${diff} AssetBundles/"
    fi
    git archive --format=zip --prefix=root/ $h `eval $diff` -o archive.zip
}

function __tmux-pbcopy {
    if ! type pbcopy >/dev/null 2>&1 || ! type reattach-to-user-namespace >/dev/null 2>&1; then
        tmux display-message "Error: cannot copy to clipboard."
        exit 0
    fi

    COPY=`tmux save-buffer -`
    echo "$COPY" | reattach-to-user-namespace pbcopy

    # メッセージ表示
    LINES=`echo "$COPY" | wc -l | tr -d ' '`
    tmux display-message "Copy: $LINES lines"
}

